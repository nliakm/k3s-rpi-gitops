---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 48.0.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: nfs-subdir-external-provisioner
      namespace: nfs-system      
  values:
    fullnameOverride: prometheus
    # Content of default rules: 
    # https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack/templates/prometheus/rules-1.14
    defaultRules:
      create: true
      rules:
        kubernetesResources: false
    additionalPrometheusRulesMap:
      rule-name:
        groups:
          - name: home-assistant
            rules:
              - alert: RsyncFailed
                expr: rsync_exit_code != 0
                for: 5m
                labels:
                  severity: critical
                annotations:
                  summary: Last rsync job failed
                  description: |-
                    "Rsync job (interval: {{ $labels.interval }}, directory: {{ $labels.directory }}) failed for instance {{ $labels.instance }} with exit code {{ $value }}."
              - alert: PrometheusTargetMissing
                expr: up == 0
                for: 0m
                labels:
                  severity: critical
                annotations:
                  summary: Prometheus target missing (instance {{ $labels.instance }})
                  description: "A Prometheus target has disappeared. An exporter might be crashed.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
    alertmanager:
      enabled: true
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "discord_webhook"
            webhook_configs:
              - url: "http://alertmanager-discord:9094"
                send_resolved: true
          - name: 'null'
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 110h
          receiver: "discord_webhook"
          routes:
            - matchers: [alertname="Watchdog"]
              receiver: 'null'
            - matchers: [severity=~"(critical|warning|error)"]
              receiver: 'discord_webhook'
              continue: true
        inhibit_rules:
          - source_matchers: [severity="critical"]
            target_matchers: [severity="warning"]
            equal: ["alertname", "namespace"]      
      resources:
        requests:
          memory: 30Mi
          cpu: 5m
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          cert-manager.io/private-key-secret-name: "root-secret"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Alertmanager"
          hajimari.io/group: "monitoring"
          hajimari.io/icon: "email-alert"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
            secretName: "alert-manager-tls-secret"
      alertmanagerSpec:
      # UID for volume 1000
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 1Gi
    kubeScheduler:
      enabled: false
    kubeControllerManager:
      enabled: false
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    prometheus-node-exporter:
      fullnameOverride: node-exporter
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    # Setting this option to 0 disabled CPU limits
    prometheusOperator:
      configReloaderCpu: 0
    # prometheusConfigReloader:
    #   # image to use for config and rule reloading
    #   image:
    #     repository: quay.io/prometheus-operator/prometheus-config-reloader
    #     tag: v0.52.0
    #   # resource config for prometheusConfigReloader
    #   resources:
    #     requests:
    #       cpu: 100m
    #       memory: 50Mi
    #     limits:
    #       cpu: 800m
    #       memory: 1Gi      
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          cert-manager.io/private-key-secret-name: "root-secret"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Prometheus"
          hajimari.io/group: "monitoring"
          hajimari.io/icon: "torch"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
            secretName: "prometheus-tls-secret"
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 21d
        resources:
          requests:
            cpu: 300m
            memory: 1Gi
          limits:
            memory: 2Gi
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 10Gi
        additionalScrapeConfigs:
          - job_name: "node-exporter"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${PIHOLE_SERVER}:9100"

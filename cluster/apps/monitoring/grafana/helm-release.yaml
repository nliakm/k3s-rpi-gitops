---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://grafana.github.io/helm-charts
      chart: grafana
      version: 6.17.8
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: nfs-subdir-external-provisioner
      namespace: nfs-system
  values:
    image:
      repository: ghcr.io/k8s-at-home/grafana
      tag: 8.2.5
      pullPolicy: IfNotPresent      
    deploymentStrategy:
      type: Recreate
    env:
      GF_EXPLORE_ENABLED: true
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_LOG_FILTERS: rendering:debug
    grafana.ini:
      server:
        root_url: "https://grafana.${SECRET_DOMAIN}"
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: false
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      auth.anonymous:
        enabled: true
        org_id: 1
        org_role: Viewer
      security:
        allow_embedding: true
    # adminUser: admin
    # adminPassword: test-pw
    admin:
      existingSecret: grafana-secrets
      userKey: GRAFANA_ADMIN_USER
      passwordKey: GRAFANA_ADMIN_PASSWORD
    ingress:
      enabled: true
      hostname: "grafana.${SECRET_DOMAIN}"
      ingressClassName: "traefik"      
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: "chart-areaspline"
        hajimari.io/group: "monitoring"
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        cert-manager.io/cluster-issuer: "selfsigned-cluster-issuer"  
        cert-manager.io/private-key-secret-name: "root-secret"
      path: /
      pathType: Prefix     
      hosts:
        - "grafana.${SECRET_DOMAIN}"       
      tls:
        - hosts:
          - "grafana.${SECRET_DOMAIN}"
          secretName: "grafana-tls-secret"
    persistence:
      enabled: true
      existingClaim: grafana-config
    initChownData:
      ## If false, data ownership will not be reset at startup
      ## This allows the prometheus-server to be run with an arbitrary user
      ## https://www.reddit.com/r/grafana/comments/nj0p31/grafana_pod_is_in_init_error_state_after_adding/
      enabled: false      
    plugins:
    - natel-discrete-panel
    - pr0ps-trackmap-panel
    - grafana-piechart-panel
    - grafana-clock-panel
    - vonage-status-panel
    - grafana-worldmap-panel
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: 'Default'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 60
          options:
            path: /var/lib/grafana/dashboards/default
        - name: 'smarthome'
          orgId: 1
          folder: 'Smarthome'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 60
          options:
            path: /var/lib/grafana/dashboards/smarthome
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-operated:9090
          isDefault: true
        # - name: Loki
        #   type: loki
        #   access: proxy
        #   url: http://loki:3100
    dashboards:
      default:
        node-exporter-full:
          url: https://grafana.com/api/dashboards/1860/revisions/22/download
          datasource: Prometheus
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
          datasource: Prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
          datasource: Prometheus
      smarthome:
        homeassistant:
          file: dashboards/homeassistant-dashboard.json
          datasource: Prometheus  
    podAnnotations:
      configmap.reloader.stakater.com/reload: "grafana"
    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        searchNamespace: ALL
    resources:
      requests:
        cpu: 75m
        memory: 128Mi
      limits:
        memory: 512Mi


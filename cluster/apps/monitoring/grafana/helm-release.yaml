---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://grafana.github.io/helm-charts
      chart: grafana
      version: 6.60.2
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: nfs-subdir-external-provisioner
      namespace: nfs-system
  values:
    image:
      repository: grafana/grafana
      pullPolicy: IfNotPresent      
    deploymentStrategy:
      type: Recreate
    env:
      GF_EXPLORE_ENABLED: true
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_LOG_FILTERS: rendering:debug
    grafana.ini:
      server:
        root_url: "https://grafana.${SECRET_DOMAIN}"
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: false
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      auth.anonymous:
        enabled: false
      auth.ldap:
        enabled: true
        allow_sign_up: true
        config_file: /etc/grafana/ldap.toml        
      security:
        allow_embedding: true 
    admin:
      existingSecret: grafana-secrets
      userKey: GRAFANA_ADMIN_USER
      passwordKey: GRAFANA_ADMIN_PASSWORD
    ldap:
      enabled: true
      # `existingSecret` is a reference to an existing secret containing the ldap configuration
      # for Grafana in a key `ldap-toml`.
      existingSecret: "grafana-ldap-toml"      
    ingress:
      enabled: true
      hostname: "grafana.${SECRET_DOMAIN}"
      ingressClassName: "traefik"      
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: "chart-areaspline"
        hajimari.io/group: "monitoring"
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        cert-manager.io/private-key-secret-name: "root-secret"
      path: /
      pathType: Prefix     
      hosts:
        - "grafana.${SECRET_DOMAIN}"       
      tls:
        - hosts:
          - "grafana.${SECRET_DOMAIN}"
          secretName: "grafana-tls-secret"
    persistence:
      enabled: true
      existingClaim: grafana-config
    initChownData:
      ## If false, data ownership will not be reset at startup
      ## This allows the prometheus-server to be run with an arbitrary user
      ## https://www.reddit.com/r/grafana/comments/nj0p31/grafana_pod_is_in_init_error_state_after_adding/
      ## Relevant UID for volumes https://grafana.com/docs/grafana/latest/installation/docker/#migrate-to-v51-or-later
      enabled: false      
    plugins:
    - natel-discrete-panel
    - pr0ps-trackmap-panel
    - grafana-piechart-panel
    - grafana-clock-panel
    - vonage-status-panel
    - grafana-worldmap-panel
    sidecar:
      image:
        repository: quay.io/kiwigrid/k8s-sidecar
        tag: 1.25.1
      imagePullPolicy: IfNotPresent
      resources:
      requests:
        cpu: 10m
        memory: 70Mi
      enableUniqueFilenames: false
      dashboards:
        enabled: true
        SCProvider: true
        # label that the configmaps with dashboards are marked with
        label: grafana_dashboard
        labelValue: "1"
        folder: /tmp/dashboards
        # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
        watchMethod: WATCH
        # search in configmap, secret or both
        resource: configmap
        # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
        # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
        folderAnnotation: dashboardfolder
        # provider configuration that lets grafana manage the dashboards
        provider:
          # name of the provider, should be unique
          name: sidecarProvider
          # orgid as configured in grafana
          orgid: 1
          # folder in which the dashboards should be imported in grafana
          folder: 'Custom'
          # type of the provider
          type: file
          # disableDelete to activate a import-only behaviour
          disableDelete: false
          # allow updating provisioned dashboards from the UI
          allowUiUpdates: false
          # allow Grafana to replicate dashboard structure from filesystem
          foldersFromFilesStructure: true
      datasources:
        enabled: false
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-operated:9090
          isDefault: true
        # - name: Loki
        #   type: loki
        #   access: proxy
        #   url: http://loki:3100
    podAnnotations:
      configmap.reloader.stakater.com/reload: "grafana"
    resources:
      requests:
        cpu: 8m
        memory: 80Mi
      limits:
        memory: 256Mi

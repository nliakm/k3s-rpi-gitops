---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: argocd
  namespace: argocd
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://argoproj.github.io/argo-helm/
      chart: argo-cd
      version: 5.34.6
      sourceRef:
        kind: HelmRepository
        name: argocd-charts
        namespace: flux-system
      interval: 5m
  values:
    global:
      image:
        # -- If defined, a repository applied to all Argo CD deployments
        repository: quay.io/argoproj/argocd
        # -- Overrides the global Argo CD image tag whose default is the chart appVersion
        tag: "v2.7.3"
        # -- If defined, a imagePullPolicy applied to all Argo CD deployments
        imagePullPolicy: IfNotPresent

      networkPolicy:
        # -- Create NetworkPolicy objects for all components
        create: false
        # -- Default deny all ingress traffic
        defaultDenyIngress: false
    ## Controller
    controller:
      # -- Application controller name string
      name: application-controller

      # -- The number of application controller pods to run.
      # If changing the number of replicas you must pass the number as `ARGOCD_CONTROLLER_REPLICAS` as an environment variable
      replicas: 1

      # -- Deploy the application controller as a StatefulSet instead of a Deployment, this is required for HA capability.
      enableStatefulSet: true

      # -- Resource limits and requests for the application controller pods
      resources:
        requests:
          cpu: 150m
          memory: 250Mi
        limits:
          memory: 400MI

      ## Application controller metrics configuration
      metrics:
        # -- Deploy metrics service
        enabled: true

        serviceMonitor:
          # -- Enable a prometheus ServiceMonitor
          enabled: true

        rules:
          # -- Deploy a PrometheusRule for the application controller
          enabled: true
          # -- PrometheusRule.Spec for the application controller
          spec:
            - alert: ArgoAppNotSynced
              expr: |
                argocd_app_info{sync_status!="Synced"} == 1
              for: 12h
              labels:
                severity: warning
              annotations:
                summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
                description: >
                  The application [{{`{{$labels.name}}`}} has not been synchronized for over
                  12 hours which means that the state of this cloud has drifted away from the
                  state inside Git.
          selector:
            prometheus: kube-prometheus-stack
          namespace: monitoring

      ## Enable if you would like to grant rights to Argo CD to deploy to the local Kubernetes cluster.
      clusterAdminAccess:
        # -- Enable RBAC for local cluster deployments
        enabled: true

    ## Dex
    dex:
      # -- Enable dex
      enabled: true
      # -- Dex name
      name: dex-server

      # # -- Additional volumeMounts to the dex main container
      # volumeMounts:
      #   - name: static-files
      #     mountPath: /shared

      # # -- Additional volumes to the dex pod
      # volumes:
      #   - name: static-files
      #     emptyDir: {}

      # -- Resource limits and requests for dex
      resources:
        requests:
          cpu: 5m
          memory: 32Mi
        limits:
          memory: 128Mi

    ## Redis
    redis:
      # -- Enable redis
      enabled: true
      # -- Redis name
      name: redis

      image:
        # -- Redis repository
        repository: public.ecr.aws/docker/library/redis
        # -- Redis tag
        tag: 7.0.11-alpine
        # -- Redis imagePullPolicy
        imagePullPolicy: IfNotPresent

      # -- Redis pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 999

      # -- Resource limits and requests for redis
      resources:
        requests:
          cpu: 5m
          memory: 5Mi
        limits:
          memory: 64Mi

      metrics:
        # -- Deploy metrics service and redis-exporter sidecar
        enabled: false

    # This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
    # the custom redis deployment is omitted
    # Check the redis-ha chart for more properties
    redis-ha:
      # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
      enabled: false

    ## Server
    server:
      # -- Argo CD server name
      name: argo-cd-server

      # -- Resource limits and requests for the Argo CD server
      resources:
        requests:
          cpu: 7m
          memory: 32Mi
        limits:
          memory: 128Mi

      ## Certificate configuration
      certificate:
        # -- Deploy a Certificate resource (requires cert-manager)
        enabled: true
        # -- Certificate primary domain (commonName)
        domain: "argocd.${SECRET_DOMAIN}"
        # -- The requested 'duration' (i.e. lifetime) of the Certificate. Value must be in units accepted by Go time.ParseDuration
        duration: "2160h"
        # -- How long before the currently issued certificate's expiry cert-manager should renew the certificate. Value must be in units accepted by Go time.ParseDuration
        renewBefore: "336h"
        issuer:
          # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
          group: "cert-manager.io"
          # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
          kind: "ClusterIssuer"
          # -- Certificate isser name. Eg. `letsencrypt`
          name: "letsencrypt-production"
        # -- The name of the Secret that will be automatically created and managed by this Certificate resource
        secretName: argocd-server-tls


      ## Server metrics service configuration
      metrics:
        # -- Deploy metrics service
        enabled: true

        serviceMonitor:
          # -- Enable a prometheus ServiceMonitor
          enabled: true

          selector:
            prometheus: kube-prometheus-stack

      ingress:
        # -- Enable an ingress resource for the Argo CD server
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"        
          hajimari.io/enable: "true"
          hajimari.io/icon: "sitemap"
          hajimari.io/appName: "argocd"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "argocd.${SECRET_DOMAIN}"
        # -- List of ingress paths
        paths:
          - /
        # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
        pathType: Prefix
        tls:
          - hosts:
              - "argocd.${SECRET_DOMAIN}"
            secretName: "argocd-tls-secret"
        # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
        https: true


    ## Repo Server
    repoServer:
      # -- Repo server name
      name: repo-server
      # -- The number of repo server pods to run
      replicas: 1
      autoscaling:
        # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
        enabled: false

      ##### KSOPS CONFIGURATION #####
      # Set the XDG_CONFIG_HOME env variable to allow kustomize to detect the plugin
      env:
        - name: GNUPGHOME
          value: /home/argocd/.gnupg
        - name: XDG_CONFIG_HOME
          value: /.config
      # Use init containers to configure custom tooling
      # https://argoproj.github.io/argo-cd/operator-manual/custom_tools/
      volumes:
        - name: custom-tools
          emptyDir: {}
        - name: gnupg-home
          emptyDir: {}
        - name: deploy-gpg-key
          secret:
            secretName: sops-gpg
      initContainers:
        - name: import-gpg-key
          image: argoproj/argocd:v2.6.8
          command: ["gpg", "--import", "/deploy-gpg-key/sops.asc"]
          env:
            - name: GNUPGHOME
              value: /gnupg-home/.gnupg
          volumeMounts:
            - mountPath: /deploy-gpg-key
              name: deploy-gpg-key
              readOnly: true
            - mountPath: /gnupg-home
              name: gnupg-home      
        - name: install-ksops
          image: viaductoss/ksops:v4.1.1-arm64
          command: ["/bin/sh", "-c"]
          args:
            - echo "Installing KSOPS...";
              mv ksops /custom-tools/;
              mv $GOPATH/bin/kustomize /custom-tools/;
              echo "Done.";
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools
      volumeMounts:
        - mountPath: /home/argocd/.gnupg
          name: gnupg-home
          subPath: .gnupg
        # - name: gpg-private-key
        #   mountPath: /app/config/gpg
        - mountPath: /usr/local/bin/kustomize
          name: custom-tools
          subPath: kustomize
          # Verify this matches a XDG_CONFIG_HOME=/.config env variable
        - mountPath: /.config/kustomize/plugin/viaduct.ai/v1/ksops/ksops
          name: custom-tools
          subPath: ksops          

      resources:
        requests:
          cpu: 25m
          memory: 50Mi
        limits:
          memory: 128Mi

        # rbac permssions
      rbac:
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get

    ## Argo Configs
    configs:
      # -- Known Hosts configmap annotations
      knownHostsAnnotations: {}
      knownHosts:
        data:
          # -- Known Hosts
          # @default -- See [values.yaml]
          ssh_known_hosts: |
            bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
            github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
            github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
            github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
            gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
            gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
            ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
            vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H

    applicationSet:
      # -- Enable Application Set controller
      enabled: true

      # -- Application Set controller name string
      name: applicationset-controller

      # -- The number of controller pods to run
      replicaCount: 1

      # -- Resource limits and requests for the controller pods.
      resources:
        requests:
          cpu: 5m
          memory: 40Mi
        limits:
          memory: 80Mi
